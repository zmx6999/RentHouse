// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/example/example.proto

/*
Package go_micro_srv_order is a generated protocol buffer package.

It is generated from these files:
	proto/example/example.proto

It has these top-level messages:
	Message
	AddRequest
	AddResponse
	GetListRequest
	GetListResponse
	HandleRequest
	HandleResponse
	CommentRequest
	CommentResponse
*/
package go_micro_srv_order

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Example service

type ExampleService interface {
	Add(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error)
	GetList(ctx context.Context, in *GetListRequest, opts ...client.CallOption) (*GetListResponse, error)
	Handle(ctx context.Context, in *HandleRequest, opts ...client.CallOption) (*HandleResponse, error)
	Comment(ctx context.Context, in *CommentRequest, opts ...client.CallOption) (*CommentResponse, error)
}

type exampleService struct {
	c    client.Client
	name string
}

func NewExampleService(name string, c client.Client) ExampleService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.order"
	}
	return &exampleService{
		c:    c,
		name: name,
	}
}

func (c *exampleService) Add(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Add", in)
	out := new(AddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) GetList(ctx context.Context, in *GetListRequest, opts ...client.CallOption) (*GetListResponse, error) {
	req := c.c.NewRequest(c.name, "Example.GetList", in)
	out := new(GetListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) Handle(ctx context.Context, in *HandleRequest, opts ...client.CallOption) (*HandleResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Handle", in)
	out := new(HandleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) Comment(ctx context.Context, in *CommentRequest, opts ...client.CallOption) (*CommentResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Comment", in)
	out := new(CommentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Example service

type ExampleHandler interface {
	Add(context.Context, *AddRequest, *AddResponse) error
	GetList(context.Context, *GetListRequest, *GetListResponse) error
	Handle(context.Context, *HandleRequest, *HandleResponse) error
	Comment(context.Context, *CommentRequest, *CommentResponse) error
}

func RegisterExampleHandler(s server.Server, hdlr ExampleHandler, opts ...server.HandlerOption) error {
	type example interface {
		Add(ctx context.Context, in *AddRequest, out *AddResponse) error
		GetList(ctx context.Context, in *GetListRequest, out *GetListResponse) error
		Handle(ctx context.Context, in *HandleRequest, out *HandleResponse) error
		Comment(ctx context.Context, in *CommentRequest, out *CommentResponse) error
	}
	type Example struct {
		example
	}
	h := &exampleHandler{hdlr}
	return s.Handle(s.NewHandler(&Example{h}, opts...))
}

type exampleHandler struct {
	ExampleHandler
}

func (h *exampleHandler) Add(ctx context.Context, in *AddRequest, out *AddResponse) error {
	return h.ExampleHandler.Add(ctx, in, out)
}

func (h *exampleHandler) GetList(ctx context.Context, in *GetListRequest, out *GetListResponse) error {
	return h.ExampleHandler.GetList(ctx, in, out)
}

func (h *exampleHandler) Handle(ctx context.Context, in *HandleRequest, out *HandleResponse) error {
	return h.ExampleHandler.Handle(ctx, in, out)
}

func (h *exampleHandler) Comment(ctx context.Context, in *CommentRequest, out *CommentResponse) error {
	return h.ExampleHandler.Comment(ctx, in, out)
}
