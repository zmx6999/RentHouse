// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/example/example.proto

/*
Package go_micro_srv_User is a generated protocol buffer package.

It is generated from these files:
	proto/example/example.proto

It has these top-level messages:
	Message
	GetCaptchaRequest
	GetCaptchaResponse
	GetSmsCaptchaRequest
	GetSmsCaptchaResponse
	RegisterRequest
	RegisterResponse
	LoginRequest
	LoginResponse
	LogoutRequest
	LogoutResponse
	InfoRequest
	InfoResponse
	AvatarRequest
	AvatarResponse
	UpdateUserNameRequest
	UpdateUserNameResponse
	AuthRequest
	AuthResponse
*/
package go_micro_srv_User

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Example service

type ExampleService interface {
	GetCaptcha(ctx context.Context, in *GetCaptchaRequest, opts ...client.CallOption) (*GetCaptchaResponse, error)
	GetSmsCaptcha(ctx context.Context, in *GetSmsCaptchaRequest, opts ...client.CallOption) (*GetSmsCaptchaResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*LogoutResponse, error)
	Info(ctx context.Context, in *InfoRequest, opts ...client.CallOption) (*InfoResponse, error)
	Avatar(ctx context.Context, in *AvatarRequest, opts ...client.CallOption) (*AvatarResponse, error)
	UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...client.CallOption) (*UpdateUserNameResponse, error)
	Auth(ctx context.Context, in *AuthRequest, opts ...client.CallOption) (*AuthResponse, error)
}

type exampleService struct {
	c    client.Client
	name string
}

func NewExampleService(name string, c client.Client) ExampleService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.User"
	}
	return &exampleService{
		c:    c,
		name: name,
	}
}

func (c *exampleService) GetCaptcha(ctx context.Context, in *GetCaptchaRequest, opts ...client.CallOption) (*GetCaptchaResponse, error) {
	req := c.c.NewRequest(c.name, "Example.GetCaptcha", in)
	out := new(GetCaptchaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) GetSmsCaptcha(ctx context.Context, in *GetSmsCaptchaRequest, opts ...client.CallOption) (*GetSmsCaptchaResponse, error) {
	req := c.c.NewRequest(c.name, "Example.GetSmsCaptcha", in)
	out := new(GetSmsCaptchaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Register", in)
	out := new(RegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*LogoutResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Logout", in)
	out := new(LogoutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) Info(ctx context.Context, in *InfoRequest, opts ...client.CallOption) (*InfoResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Info", in)
	out := new(InfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) Avatar(ctx context.Context, in *AvatarRequest, opts ...client.CallOption) (*AvatarResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Avatar", in)
	out := new(AvatarResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...client.CallOption) (*UpdateUserNameResponse, error) {
	req := c.c.NewRequest(c.name, "Example.UpdateUserName", in)
	out := new(UpdateUserNameResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) Auth(ctx context.Context, in *AuthRequest, opts ...client.CallOption) (*AuthResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Auth", in)
	out := new(AuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Example service

type ExampleHandler interface {
	GetCaptcha(context.Context, *GetCaptchaRequest, *GetCaptchaResponse) error
	GetSmsCaptcha(context.Context, *GetSmsCaptchaRequest, *GetSmsCaptchaResponse) error
	Register(context.Context, *RegisterRequest, *RegisterResponse) error
	Login(context.Context, *LoginRequest, *LoginResponse) error
	Logout(context.Context, *LogoutRequest, *LogoutResponse) error
	Info(context.Context, *InfoRequest, *InfoResponse) error
	Avatar(context.Context, *AvatarRequest, *AvatarResponse) error
	UpdateUserName(context.Context, *UpdateUserNameRequest, *UpdateUserNameResponse) error
	Auth(context.Context, *AuthRequest, *AuthResponse) error
}

func RegisterExampleHandler(s server.Server, hdlr ExampleHandler, opts ...server.HandlerOption) error {
	type example interface {
		GetCaptcha(ctx context.Context, in *GetCaptchaRequest, out *GetCaptchaResponse) error
		GetSmsCaptcha(ctx context.Context, in *GetSmsCaptchaRequest, out *GetSmsCaptchaResponse) error
		Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error
		Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error
		Logout(ctx context.Context, in *LogoutRequest, out *LogoutResponse) error
		Info(ctx context.Context, in *InfoRequest, out *InfoResponse) error
		Avatar(ctx context.Context, in *AvatarRequest, out *AvatarResponse) error
		UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, out *UpdateUserNameResponse) error
		Auth(ctx context.Context, in *AuthRequest, out *AuthResponse) error
	}
	type Example struct {
		example
	}
	h := &exampleHandler{hdlr}
	return s.Handle(s.NewHandler(&Example{h}, opts...))
}

type exampleHandler struct {
	ExampleHandler
}

func (h *exampleHandler) GetCaptcha(ctx context.Context, in *GetCaptchaRequest, out *GetCaptchaResponse) error {
	return h.ExampleHandler.GetCaptcha(ctx, in, out)
}

func (h *exampleHandler) GetSmsCaptcha(ctx context.Context, in *GetSmsCaptchaRequest, out *GetSmsCaptchaResponse) error {
	return h.ExampleHandler.GetSmsCaptcha(ctx, in, out)
}

func (h *exampleHandler) Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error {
	return h.ExampleHandler.Register(ctx, in, out)
}

func (h *exampleHandler) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.ExampleHandler.Login(ctx, in, out)
}

func (h *exampleHandler) Logout(ctx context.Context, in *LogoutRequest, out *LogoutResponse) error {
	return h.ExampleHandler.Logout(ctx, in, out)
}

func (h *exampleHandler) Info(ctx context.Context, in *InfoRequest, out *InfoResponse) error {
	return h.ExampleHandler.Info(ctx, in, out)
}

func (h *exampleHandler) Avatar(ctx context.Context, in *AvatarRequest, out *AvatarResponse) error {
	return h.ExampleHandler.Avatar(ctx, in, out)
}

func (h *exampleHandler) UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, out *UpdateUserNameResponse) error {
	return h.ExampleHandler.UpdateUserName(ctx, in, out)
}

func (h *exampleHandler) Auth(ctx context.Context, in *AuthRequest, out *AuthResponse) error {
	return h.ExampleHandler.Auth(ctx, in, out)
}
